#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

debug=3
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=2

/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to disable TCP (default on) */
disable_tcp=yes

/* uncomment the following lines to enable TLS support  (default off) */
#disable_tls = no
#listen = tls:your_IP:5061
#tls_verify_server = 1
#tls_verify_client = 1
#tls_require_client_certificate = 0
#tls_method = TLSv1
#tls_certificate = "/opt/telephony/opensips/etc/opensips/tls/user/user-cert.pem"
#tls_private_key = "/opt/telephony/opensips/etc/opensips/tls/user/user-privkey.pem"
#tls_ca_list = "/opt/telephony/opensips/etc/opensips/tls/user/user-calist.pem"

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no

#### Uncomment to listen on all interfaces with specified port
#port=9898

#### Uncomment to specify listening on protocol/interface/port
listen=udp:eth2:5060 sctp:eth2:5060


####### Modules Section ########

#set module path
mpath="/opt/telephony/opensips/lib/opensips/modules/"

#### Mysql DB module
loadmodule "db_mysql.so"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timer", 5)
modparam("tm", "fr_inv_timer", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)     # do not append from tag to the RR (no need for this script)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)
modparam("uri", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)
#modparam("usrloc", "db_mode",   2)     # uncomment if you want to enable DB persistency
#modparam("usrloc", "db_url",
#   "mysql://opensips:opensipsrw@localhost/opensips")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "failed_transaction_flag", "ACC_FAILED")
#modparam("acc", "log_flag", "ACC_DO")
modparam("acc", "log_missed_flag", "ACC_MISSED")

loadmodule "textops.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "db_url",
   "mysql://opensips:opensipsrw@localhost/opensips")
#modparam("auth_db|usrloc|uri", "use_domain", 1)

loadmodule "alias_db.so"
modparam("alias_db", "db_url",
   "mysql://opensips:opensipsrw@localhost/opensips")

loadmodule "domain.so"
modparam("domain", "db_url",
   "mysql://opensips:opensipsrw@localhost/opensips")
#modparam("domain", "db_mode", 1)   # Use caching

loadmodule "avpops.so"
modparam("avpops", "db_url",
    "mysql://opensips:opensipsrw@localhost/opensips")

#loadmodule "presence.so"
#modparam("presence|presence_xml", "db_url",
#   "mysql://opensips:opensipsrw@localhost/opensips")
#modparam("presence_xml", "force_active", 1)
#modparam("presence", "server_address", "sip:192.168.1.2:5060")

#loadmodule "presence_xml.so"


####### Routing Logic ########

# main request routing logic

route{
    # If no Max-Forward header is present in the received request, a
    # header will be added having the original value equal with
    # "10" (max_value). If a Max-Forward header is already present, its
    # value will be decremented.
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    # No Presence Service availble now
    if (method == "SUBSCRIBE" || method == "PUBLISH") {
        sl_send_reply("500","Not Supported Message");
        exit;
    }

    if (method == "REGISTER") {
        route(1);
    } else {
        # we record-route all messages -- to make sure that
        # subsequent messages will go through our proxy; that's
        # particularly good if upstream and downstream entities
        # use different transport protocol
        record_route();

        # subsequent messages withing a dialog should take the
        # path determined by record-routing
        if (loose_route()) {
            # mark routing logic in request
            append_hf("P-hint: rr-enforced\r\n", "CSeq");
            route(2);
        };

        if (method == "INVITE") {
            setflag(5);

            if (uri =~ "sip:conf=1[0-9][0-9]@192.168.56.10") {
                route(3);
            } else if (uri =~ "sip:[1-2][0-9][0-9]@.*") {
                route(4);
            } else {
                # native SIP destinations are handled using our USRLOC DB
                lookup("aliases");

                if (db_does_uri_exist()) {
                    if (!lookup("location")) {
                        append_hf("P-App-Name:  voicemail\r\n", "CSeq");
                        avp_db_query("select email_address FROM subscriber WHERE username='$rU'","$avp(s:666)");
                        append_hf("P-App-Param: user=$rU;eml=$avp(s:666)\r\n");

                        if (!t_relay("udp:192.168.56.10:5070")) {
                            sl_send_reply("404", "User is not online");
                            exit;
                        }

                        exit;
                    } else {
                        append_hf("P-hint: usrloc applied\r\n", "CSeq");
                        route(2);
                    }
                } else {
                    append_hf("P-App-Name: annc_service\r\n", "CSeq");
                    seturi("sip:announcement@192.168.56.10:5070;play=http://taurus.bj.lucent.com/~kwang/annc/nonumber.wav");

                    if (!t_relay("udp:192.168.56.10:5070")) {
                        sl_send_reply("404", "The number does not exist");
                        exit;
                    }

                    exit;
                }
            }
        }

        route(2);
    }
}

route[1] {
    if (!www_authorize("", "subscriber")) {
        www_challenge("", "0");
        exit;
    }

    if (!db_check_to()) {
        sl_send_reply("403","Forbidden auth ID");
        exit;
    }

    if (!save("location")) {
        sl_reply_error();
    }

    exit;
}

route[2] {
    t_on_failure("2");
    if (!t_relay()) {
        sl_reply_error();
    }

    exit;
}

route[3] {
    # Check conference INVITE Request
    if (search("Contact: <sip:sems@192.168.56.10:5070>")) {
        replace("P-App-Name: conf_auth", "P-App-Name: conference");
    }

    if (!t_relay("udp:192.168.56.10:5070", "0x01")) {
        sl_send_reply("500", "could not contact conf server");
        exit;
    }

    exit;
}

route[4] {
    if (uri =~ "^sip:111@.*") {
        append_hf("P-App-Name: voicebox\r\n", "CSeq");
        append_hf("P-App-Param: usr=$fU;dom=3322.org\r\n", "CSeq");
        seturi("sip:voicebox@192.168.56.10:5070");
    } else if (uri =~ "^sip:200@.*") {
        append_hf("P-App-Name: conf_auth\r\n", "CSeq");
        seturi("sip:conf_auth@192.168.56.10:5070");
    } else {
        append_hf("P-App-Name: annc_service\r\n", "CSeq");
        seturi("sip:announcement@192.168.56.10:5070;play=http://taurus.bj.lucent.com/~kwang/annc/noservice.wav");
    }

    if (!t_relay()) {
        log("could not contact media server\n");
        sl_send_reply("500","could not contact media server");
        exit;
    }

    exit;
}

failure_route[2] {
    if (t_was_cancelled()) {
        exit;
    }

    if (t_check_status("408") || t_check_status("480") || t_check_status("486")) {
        append_hf("P-App-Name:  voicemail\r\n", "CSeq");
        avp_db_query("select email_address FROM subscriber WHERE username='$rU'","$avp(s:666)");
        append_hf("P-App-Param: user=$rU;dom=3322.org;eml=$avp(s:666)\r\n");

        t_relay("udp:192.168.56.10:5070");

        exit;
    }
}
